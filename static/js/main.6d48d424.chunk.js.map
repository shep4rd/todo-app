{"version":3,"sources":["taskList/taskListSlice.js","menu/Menu.js","taskList/TaskCard.js","taskList/TaskList.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["taskListSlice","createSlice","name","initialState","tasks","id","title","description","isOpen","bgColor","txtColor","reducers","addTask","state","action","push","length","payload","closeTask","index","findIndex","task","editTask","reorderTasks","actions","selectTasks","taskList","filter","Menu","dispatch","useDispatch","useState","setTitle","Grid","component","className","InputBase","placeholder","value","onChange","event","target","IconButton","aria-label","onClick","useStyles","makeStyles","theme","cardActionStyle","display","width","flexDirection","alignItems","margin","cardBase","cardContent","flexGrow","modal","justifyContent","paper","backgroundColor","palette","background","border","borderRadius","boxShadow","shadows","padding","spacing","height","modalInputTitle","marginBottom","modalInputDescription","minHeight","select","minWidth","colorBox","marginRight","colorName","buttonDisabled","StyledSelect","styled","Select","bgColorRange","txtColorRange","TaskCard","props","classes","expanded","setExpanded","setModal","taskUpdate","setTaskUpdate","modalBody","Fade","in","InputLabel","multiline","rows","container","item","xs","variant","renderValue","style","map","code","MenuItem","Button","color","draggableId","toString","provided","snapshot","ref","innerRef","draggableProps","Card","CardActions","dragHandleProps","CardActionArea","disabled","CardContent","Typography","size","buttonActive","Collapse","timeout","unmountOnExit","paragraph","Modal","aria-labelledby","aria-describedby","open","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","TaskList","savedTasks","useSelector","onDragEnd","result","destination","newTasks","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","droppableId","App","Container","maxWidth","configureStore","reducer","taskListReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d48d424.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const taskListSlice = createSlice({\r\n  name: \"[TASK LIST]\",\r\n\r\n  initialState: {\r\n    tasks: [\r\n      {\r\n        id: 0,\r\n        title: 'Zadanie z opisem',\r\n        description: 'Opis zadania do podania',\r\n        isOpen: true,\r\n        bgColor: '#bbbbbb',\r\n        txtColor: '#000000',\r\n      },\r\n      {\r\n        id: 1,\r\n        title: 'Zadanie bez opisu',\r\n        description: '',\r\n        isOpen: true,\r\n        bgColor: '#bbbbbb',\r\n        txtColor: '#000000',\r\n      },\r\n    ],\r\n  },\r\n\r\n  reducers: {\r\n    addTask: (state, action) => {\r\n      state.tasks.push(\r\n        {\r\n          id: state.tasks.length,\r\n          title: action.payload,\r\n          description: '',\r\n          isOpen: true,\r\n          bgColor: '#bbbbbb',\r\n          txtColor: '#000000',\r\n        }\r\n      )\r\n    },\r\n    closeTask: (state, action) => {\r\n      const index = state.tasks.findIndex(task => task.id === action.payload)\r\n      state.tasks[index].isOpen = false;\r\n    },\r\n    editTask: (state, action) => {\r\n      const index = state.tasks.findIndex(task => task.id === action.payload.id)\r\n      state.tasks[index].title = action.payload.title;\r\n      state.tasks[index].description = action.payload.description;\r\n      state.tasks[index].bgColor = action.payload.bgColor;\r\n      state.tasks[index].txtColor = action.payload.txtColor;\r\n    },\r\n    reorderTasks: (state, action) => {\r\n      state.tasks = action.payload\r\n    }\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  editTask,\r\n  closeTask,\r\n  reorderTasks,\r\n} = taskListSlice.actions;\r\n\r\nexport const selectTasks = (state) => state.taskList.tasks.filter((task) => task.isOpen);\r\n\r\nexport default taskListSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { Grid, IconButton, InputBase, Paper } from '@material-ui/core';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport { addTask } from '../taskList/taskListSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport function Menu() {\r\n  const dispatch = useDispatch();\r\n  const [title, setTitle] = useState('')\r\n\r\n  return (\r\n    <Grid component=\"form\" className=\"Menu\">\r\n      <InputBase\r\n        className=\"Input\"\r\n        placeholder=\"Add new task\"\r\n        value={title}\r\n        onChange={(event) => setTitle(event.target.value)}\r\n      />\r\n      <IconButton \r\n        className=\"button\" \r\n        aria-label=\"search\"\r\n        onClick={() => dispatch(addTask(title))}\r\n      >\r\n        <AddCircleOutlineIcon />\r\n      </IconButton>\r\n    </Grid>\r\n  );\r\n}","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  Backdrop,\r\n  Button,\r\n  Card,\r\n  CardActionArea,\r\n  CardActions,\r\n  CardContent,\r\n  Collapse,\r\n  Fade,\r\n  Grid,\r\n  IconButton,\r\n  InputBase,\r\n  InputLabel,\r\n  Modal,\r\n  Select,\r\n  MenuItem,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { closeTask, editTask } from \"./taskListSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardActionStyle: {\r\n    display: \"inherit\",\r\n    width: \"100%\",\r\n  },\r\n\r\n  task: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    width: \"100%\",\r\n    margin: \"5px 0px\",\r\n  },\r\n\r\n  cardBase: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    width: \"100%\",\r\n  },\r\n\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"1px solid grey\",\r\n    borderRadius: \"8px\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    width: \"400px\",\r\n    height: \"400px\",\r\n  },\r\n\r\n  modalInputTitle: {\r\n    width: \"100%\",\r\n    border: \"1px solid #cccccc\",\r\n    borderRadius: \"4px\",\r\n    padding: \"5px\",\r\n    marginBottom: \"15px\",\r\n    backgroundColor: \"#eeeeee\",\r\n  },\r\n\r\n  modalInputDescription: {\r\n    width: \"100%\",\r\n    border: \"1px solid #cccccc\",\r\n    borderRadius: \"4px\",\r\n    padding: \"5px\",\r\n    marginBottom: \"15px\",\r\n    backgroundColor: \"#eeeeee\",\r\n    minHeight: \"150px\",\r\n  },\r\n\r\n  select: {\r\n    minWidth: \"50%\",\r\n    height: \"50px\",\r\n  },\r\n\r\n  colorBox: {\r\n    width: \"20px\",\r\n    height: \"20px\",\r\n    border: \"1px solid grey\",\r\n    borderRadius: \"10px\",\r\n    marginRight: \"10px\",\r\n  },\r\n\r\n  colorName: {\r\n    margin: \"0px\",\r\n  },\r\n\r\n  buttonDisabled: {\r\n    display: \"none\",\r\n  },\r\n}));\r\n\r\nconst StyledSelect = styled(Select)`\r\n  .MuiFilledInput-input {\r\n    padding: 10px 12px 10px;\r\n  }\r\n`;\r\n\r\nconst bgColorRange = [\r\n  [\"grey\", \"#bbbbbb\"],\r\n  [\"red\", \"#f6685e\"],\r\n  [\"purple\", \"#af52bf\"],\r\n  [\"indigo\", \"#6573c3\"],\r\n  [\"blue\", \"#35baf6\"],\r\n  [\"teal\", \"#33ab9f\"],\r\n  [\"green\", \"#a2cf6e\"],\r\n  [\"yellow\", \"#ffef62\"],\r\n  [\"orange\", \"#ffac33\"],\r\n];\r\n\r\nconst txtColorRange = [\r\n  [\"black\", \"#000000\"],\r\n  [\"red\", \"#aa2e25\"],\r\n  [\"purple\", \"#6d1b7b\"],\r\n  [\"indigo\", \"#2c387e\"],\r\n  [\"blue\", \"#0276aa\"],\r\n  [\"teal\", \"#00695f\"],\r\n  [\"green\", \"#618833\"],\r\n  [\"yellow\", \"#b2a429\"],\r\n  [\"orange\", \"#b26a00\"],\r\n];\r\n\r\nexport function TaskCard(props) {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles(props);\r\n\r\n  const [expanded, setExpanded] = useState(false);\r\n  const [modal, setModal] = useState(false);\r\n  const [taskUpdate, setTaskUpdate] = useState({\r\n    id: props.id,\r\n    title: props.title,\r\n    description: props.description,\r\n    bgColor: props.bgColor,\r\n    txtColor: props.txtColor,\r\n  });\r\n\r\n  const modalBody = (\r\n    <Fade in={modal}>\r\n      <Grid className={classes.paper}>\r\n        <InputLabel>Title</InputLabel>\r\n        <InputBase\r\n          className={classes.modalInputTitle}\r\n          value={taskUpdate.title}\r\n          onChange={(event) =>\r\n            setTaskUpdate({ ...taskUpdate, title: event.target.value })\r\n          }\r\n        />\r\n        <InputLabel>Description</InputLabel>\r\n        <InputBase\r\n          multiline\r\n          rows={7}\r\n          className={classes.modalInputDescription}\r\n          value={taskUpdate.description}\r\n          onChange={(event) =>\r\n            setTaskUpdate({ ...taskUpdate, description: event.target.value })\r\n          }\r\n        />\r\n\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={6}>\r\n            <InputLabel>Card color</InputLabel>\r\n            <StyledSelect\r\n              variant=\"filled\"\r\n              className={classes.select}\r\n              value={taskUpdate.bgColor}\r\n              onChange={(event) =>\r\n                setTaskUpdate({ ...taskUpdate, bgColor: event.target.value })\r\n              }\r\n              renderValue={() => (\r\n                <div\r\n                  className={classes.colorBox}\r\n                  style={{ backgroundColor: taskUpdate.bgColor }}\r\n                ></div>\r\n              )}\r\n            >\r\n              {bgColorRange.map(([name, code]) => {\r\n                return (\r\n                  <MenuItem value={code}>\r\n                    <div\r\n                      className={classes.colorBox}\r\n                      style={{ backgroundColor: code }}\r\n                    ></div>\r\n                    <p className={classes.colorName}>{name}</p>\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </StyledSelect>\r\n          </Grid>\r\n\r\n          <Grid item xs={6}>\r\n            <InputLabel>Text color</InputLabel>\r\n            <StyledSelect\r\n              variant=\"filled\"\r\n              className={classes.select}\r\n              value={taskUpdate.txtColor}\r\n              onChange={(event) =>\r\n                setTaskUpdate({ ...taskUpdate, txtColor: event.target.value })\r\n              }\r\n              renderValue={() => (\r\n                <div\r\n                  className={classes.colorBox}\r\n                  style={{ backgroundColor: taskUpdate.txtColor }}\r\n                ></div>\r\n              )}\r\n            >\r\n              {txtColorRange.map(([name, code]) => {\r\n                return (\r\n                  <MenuItem value={code}>\r\n                    <div\r\n                      className={classes.colorBox}\r\n                      style={{ backgroundColor: code }}\r\n                    ></div>\r\n                    <p className={classes.colorName}>{name}</p>\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </StyledSelect>\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                dispatch(editTask(taskUpdate));\r\n                setModal(false);\r\n              }}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Fade>\r\n  );\r\n\r\n  return (\r\n    <Draggable key={props.id} draggableId={props.id.toString()} index={props.index}>\r\n      {(provided, snapshot) => (\r\n        <div \r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n        >\r\n          <Card\r\n            className={classes.task}\r\n            style={{ \"backgroundColor\": props.bgColor }}\r\n          >\r\n            <Grid item className={classes.cardBase} xs={12}>\r\n              <CardActions xs={1}>\r\n                <IconButton {...provided.dragHandleProps}>\r\n                  <MenuIcon />\r\n                </IconButton>\r\n              </CardActions>\r\n              <CardActionArea\r\n                className={classes.cardActionStyle}\r\n                disabled={props.description ? false : true}\r\n                onClick={() => setExpanded(!expanded)}\r\n              >\r\n                <CardContent className={classes.cardContent} xs={9}>\r\n                  <Typography variant=\"h6\" style={{ color: props.txtColor }}>\r\n                    {props.title ? props.title : \"Add card title\"}\r\n                  </Typography>\r\n                </CardContent>\r\n              </CardActionArea>\r\n              <CardActions xs={3}>\r\n                <IconButton\r\n                  size=\"small\"\r\n                  className={\r\n                    props.description ? classes.buttonActive : classes.buttonDisabled\r\n                  }\r\n                  // disabled={description ? false : true }\r\n                  onClick={() => setExpanded(!expanded)}\r\n                >\r\n                  {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n                </IconButton>\r\n                <IconButton size=\"small\" onClick={() => setModal(true)}>\r\n                  <EditIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                  size=\"small\"\r\n                  onClick={() => dispatch(closeTask(props.id))}\r\n                >\r\n                  <DeleteIcon />\r\n                </IconButton>\r\n              </CardActions>\r\n            </Grid>\r\n\r\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n              <CardContent className={classes.cardContent} xs={9}>\r\n                <Typography paragraph style={{ color: props.txtColor }}>\r\n                  {props.description\r\n                    ? props.description\r\n                    : \"Add task description text\"}\r\n                </Typography>\r\n              </CardContent>\r\n            </Collapse>\r\n\r\n            <Modal\r\n              aria-labelledby=\"transition-modal-title\"\r\n              aria-describedby=\"transition-modal-description\"\r\n              className={classes.modal}\r\n              open={modal}\r\n              onClose={() => setModal(false)}\r\n              closeAfterTransition\r\n              BackdropComponent={Backdrop}\r\n              BackdropProps={{\r\n                timeout: 500,\r\n              }}\r\n            >\r\n              {modalBody}\r\n            </Modal>\r\n          </Card>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { TaskCard } from \"./TaskCard\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, reorderTasks } from \"./taskListSlice\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nexport function TaskList() {\r\n  const dispatch = useDispatch();\r\n  const savedTasks = useSelector(selectTasks);\r\n\r\n  function onDragEnd(result) {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const newTasks = reorder(\r\n      savedTasks,\r\n      result.source.index,\r\n      result.destination.index\r\n    );\r\n\r\n    dispatch(reorderTasks(newTasks));\r\n  }\r\n\r\n  return (\r\n    <Grid container>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"droppable\">\r\n          {(provided, snapshot) => (\r\n            <div ref={provided.innerRef} style={{width: '100%'}}>           \r\n              <Grid item xs={12}>\r\n                {savedTasks.map((task, index) => (\r\n                  <TaskCard\r\n                    index={index}\r\n                    key={task.id}\r\n                    id={task.id}\r\n                    title={task.title}\r\n                    description={task.description}\r\n                    bgColor={task.bgColor}\r\n                    txtColor={task.txtColor}\r\n                  />\r\n                ))}\r\n                {provided.placeholder}\r\n            </Grid>\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Container, Grid} from \"@material-ui/core\";\r\nimport { Menu } from './menu/Menu';\r\nimport { TaskList } from './taskList/TaskList';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      <Menu />\r\n      <Grid container> \r\n        <TaskList />\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport taskListReducer from '../taskList/taskListSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    taskList: taskListReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}